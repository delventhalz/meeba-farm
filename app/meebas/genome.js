import * as settings from '../settings.js';
import { range, flatten } from '../utils/arrays.js';
import { randInt } from '../utils/math.js';

/**
 * Instructions for building a meeba
 *
 * @typedef Commands
 * @prop {number} mass - the mass/area of the meeba
 */

const { averageStartingGeneCount, averageStartingGeneSize } = settings.meebas;
const MAX_GENES = 2 * averageStartingGeneCount;
const MAX_BYTES = 2 * averageStartingGeneSize;

const CONTROL_BYTE = 0xF0;

/**
 * Returns a gene with a control byte followed a random number of
 * randomly generated bytes (not yet formatted as a Uint8Array)
 *
 * @returns {number[]}
 */
const randGene = () => {
  const gene = range(randInt(1, MAX_BYTES)).map(() => randInt(0, 256));
  return [CONTROL_BYTE].concat(gene);
};

/**
 * Creates a new random genome encoded as a Uint8Array
 *
 * @returns {Uint8Array}
 */
export const createGenome = () => {
  const genes = range(randInt(1, MAX_GENES)).map(randGene);
  return Uint8Array.from(flatten(genes));
};

/**
 * Count the number of 1 bits in a byte
 *
 * @param {number} byte
 * @returns {number} - number of 1's
 */
const countBits = byte => byte
  .toString(2)
  .split('')
  .filter(bit => bit === '1')
  .length;

/**
 * A function that reads a byte and modifies a command object as needed
 *
 * @callback GeneReader
 * @param {number} [byte]
 */

/**
 * @param {Commands} commands
 * @returns {GeneReader}
 */
const getSizeGeneReader = (commands) => (byte) => {
  commands.mass += countBits(byte);
};

/**
 * @type {GeneReader}
 */
const noopReader = () => {};

/**
 * @type {Object<string, function(Commands): GeneReader>}
 */
const geneReaders = {
  0xF0: getSizeGeneReader,
};

/**
 * Interprets a genome, returning a command object with instructions
 * for building a meeba based on the encoded genes
 *
 * @param {Uint8Array} genome
 * @returns {Commands}
 */
export const readGenome = (genome) => {
  const commands = {
    mass: 0,
  };
  let read = noopReader;

  for (const byte of genome) {
    if (byte >= 0xF0) {
      read = geneReaders[byte] ? geneReaders[byte](commands) : noopReader;
    } else {
      read(byte);
    }
  }

  return commands;
};
